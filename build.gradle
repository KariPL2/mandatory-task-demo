plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.github.node-gradle.node" version "3.1.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.5'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.springframework.session:spring-session-core'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


node {

	version = '18.17.1'
	download = true
}

task npmBuild(type: com.github.gradle.node.npm.task.NpmTask) {
	workingDir = file("${project.rootDir}/frontend")
	args = ['run', 'build']
	outputs.upToDateWhen { false }
}

task copyFrontendBuild(type: Copy) {
	dependsOn npmBuild

	from "${project.rootDir}/frontend/dist"

	into "${project.buildDir}/resources/main/static"
}

processResources.dependsOn copyFrontendBuild

clean {
	delete file("${project.rootDir}/frontend/dist")
	delete file("${project.buildDir}/resources/main/static")
}

